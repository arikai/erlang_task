Ярослав, еще раз добрый день!

На задание мы обычно даем 3-4 дня, т.к. Вы сказали, что сейчас не сможете его оперативно прислать, то буду ждать ответ от Вас до 6 марта(включительно)

 

Разработать на Erlang/OTP:

 

Задача1. Напишите модуль db.erl, создающий базу данных и предоставляющий CRUD API для доступа к ней. Спецификация следующая:

db:new(DbName) - > ok

      DbName = string()

db:create(Record, DbName) - > {ok, Record} | {error, Reason}

      Record = {Key, UserName, City}

            Key = integer() (must be unique)

            UserName = string()

            City = string()

      Reason = term() %создание должно завершиться с ошибкой, если Key занят.

db:read(Key, DbName) - > {ok, Record} | {error, Reason}

      % чтение должно завершиться с ошибкой, если Key не существует в базе.

db:update(Record, DbName) - > {ok, Record} | {error, Reason}

      % обновление записи должно завершиться с ошибкой, если Key не существует в базе.

db:delete(Key, DbName) - > ok | {error, Reason}

      % удаление записи должно завершиться с ошибкой, если Key не существует в базе.

 

Допускается использовать любые типы и структуры данных на усмотрение соискателя.

 

Задача2 (факультативно). Имеются несколько текстовых файлов: data1.txt, data2.txt etc. Нужно выбрать все слова, которые содержаться в этих файлах, и посчитать количество вхождений каждого слова.

 

Вам нужно реализовать функцию map_reduce:start/1, которая получает на старте список файлов, а на выходе отдает карту, где ключи -- все слова, встречающиеся в этих файлах, а значения -- количество вхождений для каждого слова. Смотрите map_reduce_test.

 

Для каждого файла нужно стартовать отдельный Map-поток, который прочитает данные из файла и посчитает слова в нем. Тут нужно также обработать ситуацию, если заданный файл не удалось прочитать. Далее, нужен поток Reduce, который соберет данные из всех Map-потоков, суммирует их, и вернет результат.
